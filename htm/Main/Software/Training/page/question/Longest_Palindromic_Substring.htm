<span-description class='f_sans'>
https://leetcode.com/problems/longest-palindromic-substring/
Longest Palindromic Substring
Given a string <u>s</u>, return the longest palindromic substring in <u>s</u>.
</span-description>

<div class='br20'></div>

<fieldset-description class='f_mono'>
Constraints
<ul>
<li>1 <= s.length <= 1000</li>
<li>s consist of only digits and English letters.</li>
</ul>
</fieldset-description>

<div class='br60'></div>

<fieldset-description class='f_mono'>
Example 1
Input: s = "babad"
Output: "bab"
Explanation: "aba" is also a valid answer.
</fieldset-description>

<div class='br20'></div>

<fieldset-description class='f_mono'>
Example 2
Input: s = "cbbd"
Output: "bb"
</fieldset-description>

<div class='br60'></div>

<fieldset-description class='f_sans'>
Hint 1
How can we reuse a previously computed palindrome to compute a larger palindrome?
</fieldset-description>

<div class='br20'></div>

<fieldset-description class='f_sans'>
Hint 2
If “aba” is a palindrome, is “xabax” a palindrome? Similarly is “xabay” a palindrome?
</fieldset-description>

<div class='br20'></div>

<fieldset-description class='f_sans'>
Hint 3
Complexity based hint
If we use brute-force and check whether for every start and end position a substring is a palindrome we have O(n^2) start - end pairs and O(n) palindromic checks. Can we reduce the time for palindromic checks to O(1) by reusing some previous computation.
</fieldset-description>