<span-description class='f_sans'>
https://leetcode.com/problems/word-search-ii/
Word Search II
Given an <u>m x n</u> <u>board</u> of characters and a list of strings <u>words</u>, return all words on the board.

Each word must be constructed from letters of sequentially adjacent cells, where <b>adjacent cells</b> are horizontally or vertically neighboring. The same letter cell may not be used more than once in a word.
</span-description>

<div class='br20'></div>

<fieldset-description class='f_mono'>
Constraints
<ul>
<li>m == board.length</li>
<li>n == board[i].length</li>
<li>1 <= m, n <= 12</li>
<li>board[i][j] is a lowercase English letter.</li>
<li>1 <= words.length <= 3 * 10<sup>4</sup></li>
<li>1 <= words[i].length <= 10</li>
<li>words[i] consists of lowercase English letters.</li>
<li>All the strings of words are unique.</li>
</ul>
</fieldset-description>

<div class='br60'></div>

<fieldset-description class='f_mono'>
Example 1
<href-image src='page/question/Word_Search_II/1.jpg' style='width: 322px;'></href-image>
Input: board = [["o", "a", "a", "n"], ["e", "t", "a", "e"], ["i", "h", "k", "r"], ["i", "f", "l", "v"]], words = ["oath", "pea", "eat", "rain"]
Output: ["eat", "oath"]
</fieldset-description>

<div class='br20'></div>

<fieldset-description class='f_mono'>
Example 2
<href-image src='page/question/Word_Search_II/2.jpg' style='width: 162px;'></href-image>
Input: board = [["a", "b"], ["c", "d"]], words = ["abcb"]
Output: []
</fieldset-description>

<div class='br60'></div>

<fieldset-description class='f_sans'>
Hint 1
You would need to optimize your backtracking to pass the larger test. Could you stop backtracking earlier?
</fieldset-description>

<div class='br20'></div>

<fieldset-description class='f_sans'>
Hint 2
If the current candidate does not exist in all words' prefix, you could stop backtracking immediately. What kind of data structure could answer such query efficiently? Does a hash table work? Why or why not? How about a Trie? If you would like to learn how to implement a basic trie, please work on this problem: Implement Trie (Prefix Tree) first.
</fieldset-description>