<span-description class='f_sans'>
https://leetcode.com/problems/binary-tree-maximum-path-sum/
Binary Tree Maximum Path Sum
A <b>path</b> in a binary tree is a sequence of nodes where each pair of adjacent nodes in the sequence has an edge connecting them. A node can only appear in the sequence <b>at most once</b>. Note that the path does not need to pass through the root.

The <b>path sum</b> of a path is the sum of the node's values in the path.

Given the <u>root</u> of a binary tree, return the maximum <b>path sum</b> of any <b>non-empty</b> path.
</span-description>

<div class='br20'></div>

<fieldset-description class='f_mono'>
Constraints
<ul>
<li>The number of nodes in the tree is in the range [1, 3 * 10<sup>4</sup>].</li>
<li>-1000 <= Node.val <= 1000</li>
</ul>
</fieldset-description>

<div class='br60'></div>

<fieldset-description class='f_mono'>
Example 1
<href-image src='page/question/Binary_Tree_Maximum_Path_Sum/1.jpg' style='width: 322px;'></href-image>
Input: root = [1, 2, 3]
Output: 6
Explanation: The optimal path is 2 -> 1 -> 3 with a path sum of 2 + 1 + 3 = 6.
</fieldset-description>

<div class='br20'></div>

<fieldset-description class='f_mono'>
Example 2
<href-image src='page/question/Binary_Tree_Maximum_Path_Sum/2.jpg'></href-image>
Input: root = [-10, 9, 20, null, null, 15, 7]
Output: 42
Explanation: The optimal path is 15 -> 20 -> 7 with a path sum of 15 + 20 + 7 = 42.
</fieldset-description>