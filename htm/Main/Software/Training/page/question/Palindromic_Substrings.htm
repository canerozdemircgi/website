<span-description class='f_sans'>
https://leetcode.com/problems/palindromic-substrings/
Palindromic Substrings
Given a string <u>s</u>, return the number of <b>palindromic substrings</b> in it.

A string is a <b>palindrome</b> when it reads the same backward as forward.

A <b>substring</b> is a contiguous sequence of characters within the string.
</span-description>

<div class='br20'></div>

<fieldset-description class='f_mono'>
Constraints
<ul>
<li>1 <= s.length <= 1000</li>
<li>s consists of lowercase English letters.</li>
</ul>
</fieldset-description>

<div class='br60'></div>

<fieldset-description class='f_mono'>
Example 1
Input: s = "abc"
Output: 3
Explanation: Three palindromic strings: "a", "b", "c".
</fieldset-description>

<div class='br20'></div>

<fieldset-description class='f_mono'>
Example 2
Input: s = "aaa"
Output: 6
Explanation: Six palindromic strings: "a", "a", "a", "aa", "aa", "aaa".
</fieldset-description>

<div class='br60'></div>

<fieldset-description class='f_sans'>
Hint 1
How can we reuse a previously computed palindrome to compute a larger palindrome?
</fieldset-description>

<div class='br20'></div>

<fieldset-description class='f_sans'>
Hint 2
If “aba” is a palindrome, is “xabax” and palindrome? Similarly is “xabay” a palindrome?
</fieldset-description>

<div class='br20'></div>

<fieldset-description class='f_sans'>
Hint 3
Complexity based hint
If we use brute-force and check whether for every start and end position a substring is a palindrome we have O(n^2) start - end pairs and O(n) palindromic checks. Can we reduce the time for palindromic checks to O(1) by reusing some previous computation?
</fieldset-description>