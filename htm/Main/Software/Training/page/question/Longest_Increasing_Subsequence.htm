<span-description class='f_sans'>
https://leetcode.com/problems/longest-increasing-subsequence/
Longest Increasing Subsequence
Given an integer array <u>nums</u>, return the length of the longest strictly increasing subsequence.

A <b>subsequence</b> is a sequence that can be derived from an array by deleting some or no elements without changing the order of the remaining elements. For example, <u>[3, 6, 2, 7]</u> is a subsequence of the array <u>[0, 3, 1, 6, 2, 2, 7]</u>.
</span-description>

<div class='br20'></div>

<fieldset-description class='f_mono'>
Constraints
<ul>
<li>1 <= nums.length <= 2500</li>
<li>-10<sup>4</sup> <= nums[i] <= 10<sup>4</sup></li>
</ul>
</fieldset-description>

<div class='br60'></div>

<fieldset-description class='f_mono'>
Example 1
Input: nums = [10, 9, 2, 5, 3, 7, 101, 18]
Output: 4
Explanation: The longest increasing subsequence is [2, 3, 7, 101], therefore the length is 4.
</fieldset-description>

<div class='br20'></div>

<fieldset-description class='f_mono'>
Example 2
Input: nums = [0, 1, 0, 3, 2, 3]
Output: 4
</fieldset-description>

<div class='br20'></div>

<fieldset-description class='f_mono'>
Example 3
Input: nums = [7, 7, 7, 7, 7, 7, 7]
Output: 1
</fieldset-description>

<div class='br60'></div>

<fieldset-description class='f_sans'>
Follow up
Can you come up with an algorithm that runs in <u>O(n log(n))</u> time complexity?
</fieldset-description>